const chatInput = document.querySelector("#chat-input");
const sendButton = document.querySelector("#send-btn");
const chatContainer = document.querySelector(".chat-container");
const themeButton = document.querySelector("#theme-btn");
const deletebutton = document.querySelector("#delete-btn")

let userText;
const API_KEY = "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";
const initialHeight = chatInput.scrollHeight;

 
const loadDataFromLocalStorage = () => {

    const themecolor = localStorage.getItem("theme-color");
   
    

    document.body.classList.toggle("light-mode" ,themecolor ==="light_mode");
    themeButton.innerHTML=document.body.classList.contains("light-mode")? "dark_mode" : "light_mode";

    const defaultText = `<div class="default-text">
                            <h1>Mid-Journey AI</h1>
                            <p> All the responses you get inside is generated by OPEN AI<br>Your chat history will be saved in the form of cookies until you delete them</p>
                            </div>`

    chatContainer.innerHTML=localStorage.getItem("all-chats") || defaultText;
    chatContainer.scrollTo(0, chatContainer.scrollHeight);

}

loadDataFromLocalStorage();

const createElement = (html,className) => {
    const chatDiv = document.createElement("div");
    chatDiv.classList.add("chat",className);
    chatDiv.innerHTML=html;
    return chatDiv; 

}

const getChatResponse = async(incomingChatDiv) => {
    const API_URL = "https://api.openai.com/v1/chat/completions";
    const pElement = document.createElement("p");

    const requestOptions = {
        method: "POST",
        headers:{
            "Content-Type": "application/json",
            "Authorization":`Bearer ${API_KEY}`
        },
        body: JSON.stringify({
            model: "gpt-3.5-turbo",
            messages: [{role: "system", content: userText }, {role: "user", content: userText}]
        })
    }

    try{
        const response = await (await fetch(API_URL, requestOptions)).json();
        pElement.textContent= response.choices[0].message.content.trim();
        console.log(response);
    } catch (error){
        console.log(error);
    }
    incomingChatDiv.querySelector(".typing-animation").remove();
    incomingChatDiv.querySelector(".chat-details").appendChild(pElement);
    chatContainer.scrollTo(0, chatContainer.scrollHeight);

    localStorage.setItem("all-chats", chatContainer.innerHTML);
}

    const copyResponse = (copyBtn)=>{
    const responseTextElement = copyBtn.parentElement.querySelector("p");
    navigator.clipboard.writeText(responseTextElement.textContent);
    copyBtn.textContent = "done";
    setTimeout(() => copyBtn.textContent = "content_copy",1000);
    }




const showTypinganimation =() => {
    const html =`<div class="chat-content">
    <div class="chat-details">
        <span class="material-symbols-outlined">
            <img src="./assets/new.png" alt="">
            </span>
            <div class="typing-animation">
                <div class="typing-dot" style="--delay: 0.2s"></div>
                <div class="typing-dot" style="--delay: 0.3s"></div>
                <div class="typing-dot" style="--delay: 0.4s"></div>
            </div>
        </div>
        
        <span onclick="copyResponse(this)" class="material-symbols-outlined copy">
                content_copy
                </span>
       
</div>`;

        const incomingChatDiv = createElement(html,"incoming");
        chatContainer.appendChild(incomingChatDiv); 
        chatContainer.scrollTo(0, chatContainer.scrollHeight);

        getChatResponse(incomingChatDiv);
}


const handleOutgoingChat = ()=> {
    userText = chatInput.value.trim();
    if(!userText)return; 

    chatInput.value ="";
    chatInput.style.height =`${initialHeight}px`;
    const html =`<div class="chat-content">
    <div class="chat-details">
        
            <img class="face" src="./assets/icons8-brain-64.png" alt="">
                <p></p>
        </div>
</div>`;

        const outgoingChatDiv = createElement(html,"outgoing");
        outgoingChatDiv.querySelector("p").textContent=userText;
        chatContainer.appendChild(outgoingChatDiv);
        chatContainer.scrollTo(0, chatContainer.scrollHeight);

        setTimeout(showTypinganimation,500);
}


themeButton.addEventListener("click",()=>{
    document.body.classList.toggle("light-mode");
    localStorage.setItem("theme-color",themeButton.innerHTML);
    themeButton.innerHTML=document.body.classList.contains("light-mode")? "dark_mode" : "light_mode";
});

chatInput.addEventListener("input",() =>{
    chatInput.style.height =`${initialHeight}px`;
    chatInput.style.height =`${chatInput.scrollHeight}px`;

});

chatInput.addEventListener("keydown",(e) =>{
    if(e.key === "Enter" && !e.shiftKey && window.innerWidth > 800){
        e.preventDefault();
        handleOutgoingChat();
    }
});


sendButton.addEventListener("click",handleOutgoingChat);

deletebutton.addEventListener("click", () =>{
    if(confirm("Are you sure you want to delete all the chats?")){
        localStorage.removeItem("all-chats")
        loadDataFromLocalStorage();
    }
})